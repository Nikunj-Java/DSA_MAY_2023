***************************************************************************************************************
BASIC OF COMPUTER PROGRAMMING LANGUAGE
***************************************************************************************************************

VARIABLE:
--------------

	- whose value van be varied and not fixed everytime
	- whenever you try to work with with some program yoou required to take input from user to process the input and generate Output
	- for that we declare variables
	- it store the value and you can process the same;

INDENTIFIER:
---------------
	- to identify a variable created  , we required intendifier
	- we can say that name of variable
	- to name the variable we need to follow some set of rules.

RULEs:
---------------
	1. varibale name can't start with a number (1num -----> it is not valid)
	2. it can be an alphanumeric (num1--------> it is valid)
	3. No Special characters are allowed (.,@#%& / space etc..)
	4. Only _(underscore) and $ (dollar) you can use while giving the varibale name.
	5. it can't be more than 255 character long.
	6. naming convension: first letter should be in lowercase. if it contains more than one letter like words then first letter we can keep small and rest words starting letter we can keet it as capital
		eg: 1. First Name:    firstName
		eg: 2. Middle Name:   middleName
		eg: 3. Last Name:     lastName
		eg: 4. Mobile Number: mobileNo 

					OR

		eg: 1. First Name:    first_Name
		eg: 2. Middle Name:   middle_Name
		eg: 3. Last Name:     last_Name
		eg: 4. Mobile Number: mobile_No
	7. we should not give the name of variable with reserved KEYWORDS

KEYWORDS :
----------------

- A specific keyword(name) which are basicaaly used to write code in the programming language.
- like if, else,switch,includes.int,float,boolean,double,char, etc..,


***************************************************************************************************************
DATA TYPES
***************************************************************************************************************

- whenever you try to store your data, your memory must assign a memory size to that variable, it can store value inside the same, that you can define the type of your data. That means you data can be a 
		number(12), 
		text("welcome to SimpliLearn"), 
		single character('A'), 
		or boolean data type( True or False)

1. WHOLE NUMBER (0,1,2,3,4,5,6......): it can be zero or possitive:------>  int

2. DECIMAL NUMBER (1.2, 4.6, 7.9) : it can be  negative or positive or zero but with floating points:---> float

3. SINGLE CHARACTER('a', 'b' ,'l' ,'p') : -----> char

4. TEXT - Sequence of characters ("NIKUNJ)- Array of char:----> String

5. SINGLE BIT VALUE ( 0 or 1): 

	0-----> False
	1-----> True


***************************************************************************************************************
SYNTAX:
***************************************************************************************************************
LANGUAGE: C


#include <stdio.h>


int main(){

		printf("Hello World From: SimpliLearn");
}


---------------------------------------------------------------

#include :  includes the library mentioned inside angle brackets, that means if you want to use library then take  the permission from the  same and start using  its function
		like:  #include <stdio.h>

-stdio.h : it is the library which provides function related to  standard input and output.

-int main(){ //program here } : called as main function ( from where the program starts its execution)


- int : it is return type, that means when function executed it return some value

- main: it is the name of method name where () says no parameter required to run this function

- if you want to pass parameters the function look like this
	--------------------------------------------------------
	int main(int a, int b){

			return a+b;
		}
	--------------------------------------------------------
-{} Called as a block of code where you can write statements for your logic

- printf: is the function available in "stdio.h" library which is used to display some value as an output

- each statement must ends with semicolon (;)


***************************************************************************************************************
COMPILER AND PROGRAMS (C: LANGUAGE)
***************************************************************************************************************

simple program with variable declaration
------------------------------------------

#include <stdio.h>

int main(){
    int num1 =10;
    int num2 =20;
    int result = num1+num2;
    
    printf("Number 1 =%d \n",num1);
    printf("Number 2 =%d \n",num2);
    printf("Result of Addition =%d \n",result);
    
    printf("%d + %d =%d",num1,num2,result);
    //%d is used for integer or decimal datatype , \n is used for new line
}

***************************************************************************************************************
OPERATORS:
***************************************************************************************************************
1. ARITHMATIC OPERATORS
------------------------

 +  addition
 -  subtraction
 *  multiplication
 /  division


----------------------------
// Online C compiler to run C program online
#include <stdio.h>

int main(){
    int num1= 100;
    int num2= 50;
    
    int add= num1+num2;
    int sub= num1-num2;
    int mul= num1*num2;
    int divide= num1/num2;
    
    printf("Number 1=%d \n",num1);
    printf("Number 2=%d \n",num2);
    
    //addition
    printf("%d + %d = %d \n",num1,num2,add);
    
    //subtraction
    printf("%d - %d = %d \n",num1,num2,sub);
    
    //multiplication
    printf("%d * %d = %d \n",num1,num2,mul);
    
    //division
    printf("%d / %d = %d \n",num1,num2,divide);
    
}

-----------------------------------------

***************************************************************************************************************
COMMENTS
***************************************************************************************************************
- They are non-executable code in your program (Not Run in The Program)

- we can write this for developer use

- there are two types of comments
	1. SINGLE LINE COMMENT
	2. MULTI LINE COMMNET

1. SINGLE LINE COMMENT
	// this is an example of simple line comment

2. MULTI LINE COMMENT

	/* this is an 
	example of 
	multi line
	comment */


***************************************************************************************************************
ALGORITHMS
***************************************************************************************************************
- it is the set of well defined instructions to solve a particular problem
- it takes a set of input(s) and produces the desired output. 
- for Eg:
	1. take two numbers Input
	2. Add Numbers using Operator
	3. Display the result


what is the Quality of Algorithm?
---------------------------------
1. input and output should be defined clearly
2. each step in the algorithm should be clear
3. algorithm should not include computer codes. instead of this , algorithms should be written in such a way that it can be used in different programming language also

***************************************************************************************************************
2. RELATIONAL OPERATORS
***************************************************************************************************************

used to compare two or more inputs

<	---------------> LESS THAN
>	---------------> GREATER THAN
<=	---------------> LESS THAN OR EQUALS
>=	---------------> GREATER THAN EQUALS
==	---------------> EQUALS TO
!=	---------------> NOT EQUALS

LET'S PREPARE ONE PROGRAM OUT OF THE ABOVE  OPERATOR AND GET THE RESULT
-------------------------------------------------------------------------------------

WHEN YOU WANT TO CHECK SOME CONDITION , CONDITIONAL STATEMENTS ARE USED FOR CHECKING CONDITIONS


if,if else, else if:

------------------------

if(condition)
{

	//this code executed if condition is true
}
-----------------------

if(condition)
{

	//this code executed if condition is true
}
else{
	//this code executed if condition is false
}

---------------------------

if(condition 1)
{

	//this code executed if condition1 is true
}
else if (condition 2){
	//this code executed if condition2 is true
}
else if (condition 3){
	//this code executed if condition3 is true
}
else if (condition 4){
	//this code executed if condition4 is true
}
else{
	//this code executed if condition is false
}



Example:1 
---------------------


#include <stdio.h>

int main() {
    int num1 = 20;
    int num2 = 120;
    
    if(num1 > num2)
    {
        printf("%d is larger: cond1 \n",num1);
    }
    else if(num1 < num2)
    {
        printf("%d is larger: cond2 \n",num2);
    }
    else if(num1 == num2)
    {
        printf("%d is equal: cond3 \n",num2);
    }
    
    else
    {
        printf("%d is smaller \n",num2);
    }
}


------------------------

TASK:

	1. write a program to display your name, address, phone qualification Details Line by Line:
	2. WAP to calculate area of  Square and Rectangle	
		- Area of Square= (side * side)
		- Area of Rectangle= Length * Breadth
	3. WAP to calculate are of CIRCLE
		- Area of circle = pi * r * r
		- pi = 3.14;
		[hint: declare a variable float pi=3.14]
	4. WAP to calculate Circumference of Circle
		- circumference of circle = 2 * pi * r
	5. WAP to calculate Perimeter of Square
		- PERIMETER= SUM OF ALL SIDES(a+a+a+a=4a)
	6. WAP to calculate Perimeter of Rectangle
		- PERIMETER = sum of all sides(l+b+l+b)=2(l+b)


Solutions:


// Online C compiler to run C program online
#include <stdio.h>

int main() {
    //square
    int side = 10;
    int area_square= side * side;
    
    printf("Area of Square: %d \n",area_square);
    
    //rectangle
    
    int length=5;
    int breadth=6;
    
    int area_rectangle= length * breadth;
    
    printf("Area of rectangle : %d \n",area_rectangle);
    
    //circle
    float pi= 3.14;
    float radius= 5.2;
    
    float area_circle= pi * radius * radius;
    
    
    printf("Area of Circle : %f \n",area_circle);
    
    //circumference of circle
    printf("Circumference of Circle: %f \n",2*pi*radius);
    
    //perimeter of square 
    printf("Perimeter of Square: %d \n",4*side);
    
    //perimeter of rectangle 
    printf("Perimeter of rectangle: %d \n",2*(length+breadth));
    
    
   
}
	


